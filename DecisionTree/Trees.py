# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RFr9T8E3sOwn0VXAfsey7ipxvwRLctu3

# Задание 1

Построение решающих деревьев для всех датасетов
"""

from sklearn import datasets
from sklearn.tree import DecisionTreeClassifier, export_graphviz
from sklearn.model_selection import train_test_split
from io import StringIO
from IPython.display import Image
import pydotplus
import os


# Загрузка данных
data_arr = [datasets.load_breast_cancer(), datasets.load_iris(), datasets.load_wine(), datasets.load_digits()]

for data in data_arr:
    dataset_name = data.DESCR.splitlines()[2]
    print("Название датасета: ", dataset_name)

    X_train, X_test, y_train, y_test = train_test_split(data.data, data.target, train_size=0.7)

    # Обучение решающего дерева
    dt = DecisionTreeClassifier()
    dt.fit(X_train, y_train)

    # Визуализация дерева
    dot_data = StringIO()
    export_graphviz(dt, out_file=dot_data, filled=True, rounded=True, special_characters=True, feature_names=[str(feature) for feature in data.feature_names], class_names=[str(target) for target in data.target_names])
    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
    Image(graph.create_png())

  # Сохранение изображения решающего дерева в формате PNG в папку "decision_trees_png"
    image_path = os.path.join("decision_trees_png", "{}.png".format(dataset_name.strip().replace(" ", "_")))
    graph.write_png(image_path)
    print("Изображение решающего дерева сохранено в: ", image_path)

from sklearn import datasets
from sklearn.model_selection import GridSearchCV, train_test_split


data_arr = [datasets.load_breast_cancer(), datasets.load_iris(), datasets.load_wine(), datasets.load_digits()]
print("Iris plants dataset - Набор данных о растениях ириса\nWine recognition dataset - Набор данных для распознавания вин\nBreast cancer wisconsin (diagnostic) dataset - Набор данных по раку молочной железы в Висконсине (диагностический)\nOptical recognition of handwritten digits dataset - Оптическое распознавание набора данных рукописных цифр")
print("------------------------------------------------------------------------")

for data in data_arr:
    dataset_name = data.DESCR.splitlines()[2]
    print(f"Название датасета: {dataset_name}")

    X_train, X_test, y_train, y_test = train_test_split(data.data, data.target, train_size=0.7)
# Задаем сетку параметров для решающих деревьев
    param_grid = {
        'criterion': ['gini', 'entropy'],
        'splitter': ['best', 'random'],
        'max_depth': [None, 1, 2, 3, 4, 5],
        'min_samples_split': [2, 3]
    }

    dt = DecisionTreeClassifier()
    grid_search = GridSearchCV(dt, param_grid, cv=5) # выполняется GridSearchCV: dt - решающее дерево, 5 - количество блоков

    grid_search.fit(X_train, y_train)
    dt_best_score = grid_search.best_score_

    best_dt = grid_search.best_estimator_

    print("Оптимальные параметры: ", grid_search.best_params_)

"""# Задание 2"""

from sklearn import datasets
from sklearn.ensemble import RandomForestClassifier  # Импорт случайного леса
from sklearn.model_selection import GridSearchCV, train_test_split

data_arr = [datasets.load_breast_cancer(), datasets.load_iris(), datasets.load_wine(), datasets.load_digits()]
print("Iris plants dataset - Набор данных о растениях ириса\nWine recognition dataset - Набор данных для распознавания вин\nBreast cancer wisconsin (diagnostic) dataset - Набор данных по раку молочной железы в Висконсине (диагностический)\nOptical recognition of handwritten digits dataset - Оптическое распознавание набора данных рукописных цифр")
print ("------------------------------------------------------------------------")

for data in data_arr:
    dataset_name = data.DESCR.splitlines()[2]  # Описание датасета
    print("Название датасета: ", dataset_name)

    X_train, X_test, y_train, y_test = train_test_split(data.data, data.target, train_size=0.7)

    param_grid = {
        'criterion': ['gini', 'entropy'],
        'n_estimators': [5, 6, 7, 8, 9, 10],  # Изменение параметра на n_estimators
        'max_depth': [None],  # Можно также менять максимальную глубину дерева
        'min_samples_split': [2, 3]
    }

    rf = RandomForestClassifier()  # Используем случайный лес
    grid_search = GridSearchCV(rf, param_grid, cv=5)  # выполняется GridSearchCV: rf - случайный лес, 5 - количество блоков
    grid_search.fit(data.data, data.target)

    print("Оптимальные параметры: ", grid_search.best_params_)
    rf_best_score = grid_search.best_score_

    best_model = "Decision Tree" if dt_best_score > rf_best_score else "Random Forest"
    print("Наилучший метод для", dataset_name, ":", best_model)